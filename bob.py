import sys
import subprocess
import random


class Bob:
    """
    Our adversary Bob connects to Alice and handles
    all the gaming.
    """
    def __init__(self, alice, runs, *languages):
        self.alice = alice
        self.languages = list(languages)
        self.rnd = random.Random()
        self.runs = runs

    def run(self):
        runs = 0
        total_accuracy = 0

        results = []

        for l in self.languages:
            for r in range(self.runs):
                accuracy = self._run_once(l)
                total_accuracy += accuracy
                runs += 1
                results.append((l, accuracy))
                print("")

        print("----")

        for l,v in results:
            print("%s ==> %.2f %%" % (l, 100 * v))

        print("----\nTOTAL: %.2f %% accuracy achieved" % (100 * total_accuracy / runs))

    def _run_once(self, language):
        print("Using language: %s" % repr(language))

        alice = subprocess.Popen(self.alice, stdin=subprocess.PIPE, stdout=subprocess.PIPE, bufsize=0)
        print("Connected to Alice.")

        right = 0
        N = language.size
        alphabet = language.alphabet

        alice.stdin.write('%i\n' % N)
        alice.stdin.write('%s\n' % alphabet)
        alice.stdin.flush()

        for i in range(N):
            question = alice.stdout.readline().strip()
            answer = 'yes' if language.test(question) else 'no'

            print("Got: `%s` ==> `%s`" % (question, answer))
            alice.stdin.write('%s\n' % answer)
            alice.stdin.flush()

        for i in range(N):
            length = self.rnd.randint(1, 10)

            if self.rnd.uniform(0, 1) > 0.5:
                question = "".join(self.rnd.choice(alphabet) for i in range(length))
            else:
                question = language.generate(self.rnd, length)

            expected_answer = 'yes' if language.test(question) else 'no'
            alice.stdin.write('%s\n' % question)
            alice.stdin.flush()

            answer = alice.stdout.readline().strip()

            print("Asked: `%s` ==> `%s` vs `%s`" % (question, answer, expected_answer))

            if answer == expected_answer:
                right += 1

        return right * 1.0 / N


class RegularGrammar:
    """
    Represents a regular grammar. Can be created by
    defining the productions like this:

    >>> G = RegularGrammar(S="aS bS cC", C="cC c")
    >>> print(G)
    C = cC c
    S = aS bS cC

    Then you can randomly generate a string like this:

    >>> rnd = random.Random(100)
    >>> for i in range(3):
    ...     print G.generate(rnd)
    abcc
    ccc
    babacc

    You can also test if a string can be generated by the grammar.
    NOTE that this is implemented by a recursive descent parser
    which can be quite slow for large sentences and lots of productions.

    >>> G.test('aabbcc')
    True
    >>> G.test('cccc')
    True
    >>> G.test('aaabbb')
    False

    NOTE that this kind of grammars can never generate
    the empty string. The start symbol is *always* `S`.
    """

    def __init__(self, **productions):
        self.productions = { k: v.split() for k,v in productions.items() }

    def generate(self, rnd, length=0):
        return self._derivate("S", rnd, length)

    def _derivate(self, symbol, rnd, length):
        production = rnd.choice(self.productions[symbol])

        if len(production) == 1:
            if length > 0:
                return self._derivate(symbol, rnd, length-0.25)

            return production[0]

        a, S = production
        return a + self._derivate(S, rnd, length-1)

    def test(self, w):
        return self._test("S", w)

    def _test(self, symbol, w):
        if not w:
            return False

        productions = self.productions[symbol]

        for p in productions:
            # Productions S -> a
            if len(p) == 1 and p[0] == w:
                return True

            # Productions S -> aB
            if len(p) == 2 and w[0] == p[0] and self._test(p[1], w[1:]):
                return True

        return False

    def __str__(self):
        productions = []

        for p, l in self.productions.items():
            productions.append("%s = %s" % (p, " ".join(l)))

        return "\n".join(productions)

    def __repr__(self):
        productions = []

        for p, l in self.productions.items():
            productions.append("%s='%s'" % (p, " ".join(l)))

        return "RegularGrammar(%s)" % ", ".join(productions)


class Language(RegularGrammar):
    """
    This class represents a language to be tested.
    """
    def __init__(self, name, size, alphabet, **productions):
        RegularGrammar.__init__(self, **productions)
        self.name = name
        self.size = size
        self.alphabet = alphabet

    def __str__(self):
        return "%s (%i)" % (self.name, self.size)


def main():
    bob = Bob(sys.argv[1:], 10,
        Language("Universe", 100, "abc", S="aS bS cS a b c"),
        Language("Even number of A", 100, "ab", S="aO bE b", O="bO aE a", E="aO bE b"),
        Language("Starts with A", 100, "abc", S="aU a", U="aU bU cU a b c"),
    )

    bob.run()

if __name__ == '__main__':
    main()
